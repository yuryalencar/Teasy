package Teasy.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ClickElement;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_Components;
  private ConceptPresentation props_Configuration;
  private ConceptPresentation props_ExecuteJavascript;
  private ConceptPresentation props_Flow;
  private ConceptPresentation props_FlowItem;
  private ConceptPresentation props_Flows;
  private ConceptPresentation props_InputText;
  private ConceptPresentation props_Keyword;
  private ConceptPresentation props_Page;
  private ConceptPresentation props_PageShouldContain;
  private ConceptPresentation props_PageShouldContainElement;
  private ConceptPresentation props_PageShouldNotContain;
  private ConceptPresentation props_PageShouldNotContainElement;
  private ConceptPresentation props_Step;
  private ConceptPresentation props_WaitForCondition;
  private ConceptPresentation props_WaitUntilElementIsEnabled;
  private ConceptPresentation props_WaitUntilElementIsNotVisible;
  private ConceptPresentation props_WaitUntilElementIsVisible;
  private ConceptPresentation props_WaitUntilPageContains;
  private ConceptPresentation props_WaitUntilPageContainsElement;
  private ConceptPresentation props_WaitUntilPageDoesNotContain;
  private ConceptPresentation props_WaitUntilPageDoesNotContainElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ClickElement:
        if (props_ClickElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept to represents a Click Element in generation step.");
          cpb.rawPresentation("Click Element");
          props_ClickElement = cpb.create();
        }
        return props_ClickElement;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This artefact represents a component for webpage");
          cpb.presentationByName();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.Components:
        if (props_Components == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("All components of the system are registered here.");
          cpb.rawPresentation("Components");
          props_Components = cpb.create();
        }
        return props_Components;
      case LanguageConceptSwitch.Configuration:
        if (props_Configuration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Configuration for running tests");
          cpb.rawPresentation("Configuration");
          props_Configuration = cpb.create();
        }
        return props_Configuration;
      case LanguageConceptSwitch.ExecuteJavascript:
        if (props_ExecuteJavascript == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Execute JavaScript");
          props_ExecuteJavascript = cpb.create();
        }
        return props_ExecuteJavascript;
      case LanguageConceptSwitch.Flow:
        if (props_Flow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Flow presents a set actions of the SUT");
          cpb.presentationByName();
          props_Flow = cpb.create();
        }
        return props_Flow;
      case LanguageConceptSwitch.FlowItem:
        if (props_FlowItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Flow item presents the execution a action in SUT");
          cpb.rawPresentation("Flow Item");
          props_FlowItem = cpb.create();
        }
        return props_FlowItem;
      case LanguageConceptSwitch.Flows:
        if (props_Flows == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A set flows in SUT");
          cpb.presentationByName();
          props_Flows = cpb.create();
        }
        return props_Flows;
      case LanguageConceptSwitch.InputText:
        if (props_InputText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Concept to represents a Input text in generation step.");
          cpb.rawPresentation("Input Text");
          props_InputText = cpb.create();
        }
        return props_InputText;
      case LanguageConceptSwitch.Keyword:
        if (props_Keyword == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Set of Step for represent a action in system.");
          cpb.presentationByName();
          props_Keyword = cpb.create();
        }
        return props_Keyword;
      case LanguageConceptSwitch.Page:
        if (props_Page == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Set of Keywords for use in flows ");
          cpb.presentationByName();
          props_Page = cpb.create();
        }
        return props_Page;
      case LanguageConceptSwitch.PageShouldContain:
        if (props_PageShouldContain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Page Should Contain");
          props_PageShouldContain = cpb.create();
        }
        return props_PageShouldContain;
      case LanguageConceptSwitch.PageShouldContainElement:
        if (props_PageShouldContainElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Page Should Contain Element");
          props_PageShouldContainElement = cpb.create();
        }
        return props_PageShouldContainElement;
      case LanguageConceptSwitch.PageShouldNotContain:
        if (props_PageShouldNotContain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Page Should Not Contain");
          props_PageShouldNotContain = cpb.create();
        }
        return props_PageShouldNotContain;
      case LanguageConceptSwitch.PageShouldNotContainElement:
        if (props_PageShouldNotContainElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Page Should Not Contain Element");
          props_PageShouldNotContainElement = cpb.create();
        }
        return props_PageShouldNotContainElement;
      case LanguageConceptSwitch.Step:
        if (props_Step == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A Unique Step for use in actions");
          props_Step = cpb.create();
        }
        return props_Step;
      case LanguageConceptSwitch.WaitForCondition:
        if (props_WaitForCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Wait For Condition");
          props_WaitForCondition = cpb.create();
        }
        return props_WaitForCondition;
      case LanguageConceptSwitch.WaitUntilElementIsEnabled:
        if (props_WaitUntilElementIsEnabled == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Wait Until Element Is Visible");
          props_WaitUntilElementIsEnabled = cpb.create();
        }
        return props_WaitUntilElementIsEnabled;
      case LanguageConceptSwitch.WaitUntilElementIsNotVisible:
        if (props_WaitUntilElementIsNotVisible == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Wait Until Element Is Not Visible");
          props_WaitUntilElementIsNotVisible = cpb.create();
        }
        return props_WaitUntilElementIsNotVisible;
      case LanguageConceptSwitch.WaitUntilElementIsVisible:
        if (props_WaitUntilElementIsVisible == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Wait Until Element Is Visible");
          props_WaitUntilElementIsVisible = cpb.create();
        }
        return props_WaitUntilElementIsVisible;
      case LanguageConceptSwitch.WaitUntilPageContains:
        if (props_WaitUntilPageContains == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wait page contain respective text");
          cpb.rawPresentation("Wait Until Page Contains");
          props_WaitUntilPageContains = cpb.create();
        }
        return props_WaitUntilPageContains;
      case LanguageConceptSwitch.WaitUntilPageContainsElement:
        if (props_WaitUntilPageContainsElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wait page contain respective Element");
          cpb.rawPresentation("Wait Until Page Contains Element");
          props_WaitUntilPageContainsElement = cpb.create();
        }
        return props_WaitUntilPageContainsElement;
      case LanguageConceptSwitch.WaitUntilPageDoesNotContain:
        if (props_WaitUntilPageDoesNotContain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wait page not contain respective text");
          cpb.rawPresentation("Wait Until Page Does Not Contain");
          props_WaitUntilPageDoesNotContain = cpb.create();
        }
        return props_WaitUntilPageDoesNotContain;
      case LanguageConceptSwitch.WaitUntilPageDoesNotContainElement:
        if (props_WaitUntilPageDoesNotContainElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wait page not contain a respective Element");
          cpb.rawPresentation("Wait Until Page Does Not Contain Element");
          props_WaitUntilPageDoesNotContainElement = cpb.create();
        }
        return props_WaitUntilPageDoesNotContainElement;
    }
    return null;
  }
}
