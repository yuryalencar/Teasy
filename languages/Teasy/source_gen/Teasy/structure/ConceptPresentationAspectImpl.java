package Teasy.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Actor;
  private ConceptPresentation props_BlockAction;
  private ConceptPresentation props_Configuration;
  private ConceptPresentation props_DataForAction;
  private ConceptPresentation props_Declaration;
  private ConceptPresentation props_DefaultElement;
  private ConceptPresentation props_EquivalencePartition;
  private ConceptPresentation props_Flow;
  private ConceptPresentation props_VerifierElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Actor:
        if (props_Actor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actor = cpb.create();
        }
        return props_Actor;
      case LanguageConceptSwitch.BlockAction:
        if (props_BlockAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BlockAction = cpb.create();
        }
        return props_BlockAction;
      case LanguageConceptSwitch.Configuration:
        if (props_Configuration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This file is for configuration test");
          cpb.rawPresentation("Configuration File");
          props_Configuration = cpb.create();
        }
        return props_Configuration;
      case LanguageConceptSwitch.DataForAction:
        if (props_DataForAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataForAction = cpb.create();
        }
        return props_DataForAction;
      case LanguageConceptSwitch.Declaration:
        if (props_Declaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This file represents a system page file");
          cpb.presentationByName();
          props_Declaration = cpb.create();
        }
        return props_Declaration;
      case LanguageConceptSwitch.DefaultElement:
        if (props_DefaultElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DefaultElement = cpb.create();
        }
        return props_DefaultElement;
      case LanguageConceptSwitch.EquivalencePartition:
        if (props_EquivalencePartition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EquivalencePartition = cpb.create();
        }
        return props_EquivalencePartition;
      case LanguageConceptSwitch.Flow:
        if (props_Flow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Flow = cpb.create();
        }
        return props_Flow;
      case LanguageConceptSwitch.VerifierElement:
        if (props_VerifierElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Element in the page to verifier system status");
          cpb.presentationByName();
          props_VerifierElement = cpb.create();
        }
        return props_VerifierElement;
    }
    return null;
  }
}
